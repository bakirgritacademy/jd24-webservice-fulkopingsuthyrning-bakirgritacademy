package se.fulkoping.rentalhub.service;
// Klassen ligger i paketet 'service', d√§r all aff√§rslogik finns.
// Controllers anropar metoder i service-lagret f√∂r att hantera data,
// och service-lagret anv√§nder repositories f√∂r att kommunicera med databasen.

import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import se.fulkoping.rentalhub.dto.BookingDTO;
import se.fulkoping.rentalhub.model.AssetEntity;
import se.fulkoping.rentalhub.model.BookingEntity;
import se.fulkoping.rentalhub.model.CustomerEntity;
import se.fulkoping.rentalhub.repository.AssetRepository;
import se.fulkoping.rentalhub.repository.BookingRepository;
import se.fulkoping.rentalhub.repository.CustomerRepository;

import java.time.LocalDate;
import java.util.List;
import java.util.NoSuchElementException;

/**
 * Denna service-klass fungerar som "hj√§rnan" i systemet.
 * Den samordnar logiken mellan kunder, tillg√•ngar och bokningar.
 *
 * H√§r finns metoder f√∂r:
 *  - Att skapa, uppdatera och ta bort tillg√•ngar (Assets)
 *  - Att hantera kunder (Customers)
 *  - Att skapa, avsluta och visa bokningar (Bookings)
 *
 * Alla controllers (API-klasser) anropar metoder i denna klass
 * ist√§llet f√∂r att direkt arbeta mot databasen.
 */
@Service // Markerar denna klass som en Spring Service-komponent
@RequiredArgsConstructor // Lombok: genererar en konstruktor som injicerar alla 'final'-f√§lt
@Slf4j // Lombok: skapar en logginstans (log.info(), log.warn() etc.)
public class RentalCoordinatorService {

    // ======================================================
    //        REPOSITORIES F√ñR DATABASKOMMUNIKATION
    // ======================================================
    private final AssetRepository assetRepo;       // Hanterar utrustning (tillg√•ngar)
    private final CustomerRepository customerRepo; // Hanterar kunddata
    private final BookingRepository bookingRepo;   // Hanterar bokningar

    // ======================================================
    // 1Ô∏è‚É£   HANTERING AV TILLG√ÖNGAR (ASSETS)
    // ======================================================

    public List<AssetEntity> listAllAssets() {
        // H√§mtar alla tillg√•ngar i databasen
        return assetRepo.findAll();
    }

    public List<AssetEntity> listAvailableAssets() {
        // H√§mtar endast de tillg√•ngar som √§r markerade som tillg√§ngliga
        return assetRepo.findByAvailableTrue();
    }

    public AssetEntity addAsset(AssetEntity asset) {
        // Sparar en ny tillg√•ng i databasen
        return assetRepo.save(asset);
    }

    public AssetEntity updateAsset(Long id, AssetEntity updated) {
        // H√§mtar den tillg√•ng som ska uppdateras
        AssetEntity existing = assetRepo.findById(id)
                .orElseThrow(() -> new NoSuchElementException("Tillg√•ng med id " + id + " finns ej"));

        // Uppdaterar f√§lten med nya v√§rden
        existing.setAssetName(updated.getAssetName());
        existing.setCategory(updated.getCategory());
        existing.setDailyRate(updated.getDailyRate());
        existing.setAvailable(updated.isAvailable());

        // Sparar uppdaterad tillg√•ng
        return assetRepo.save(existing);
    }

    public void deleteAsset(Long id) {
        // Kontroll: f√•r inte ta bort en tillg√•ng som har aktiv bokning
        if (bookingRepo.existsByAsset_IdAndActiveTrue(id)) {
            throw new IllegalStateException("Kan inte ta bort tillg√•ng ‚Äì aktiv bokning finns.");
        }
        assetRepo.deleteById(id);
    }

    // ======================================================
    // 2Ô∏è‚É£   HANTERING AV KUNDER (CUSTOMERS)
    // ======================================================

    public List<CustomerEntity> listAllCustomers() {
        // H√§mtar alla kunder fr√•n databasen
        return customerRepo.findAll();
    }

    public CustomerEntity addCustomer(CustomerEntity c) {
        // Validerar att e-post finns och inte √§r tom
        if (c.getEmail() == null || c.getEmail().isBlank()) {
            throw new IllegalArgumentException("E-post kr√§vs");
        }

        // Kontroll: f√•r inte registrera kund med e-post som redan anv√§nds
        if (customerRepo.existsByEmail(c.getEmail())) {
            throw new IllegalStateException("E-post anv√§nds redan");
        }

        // Sparar kunden i databasen
        return customerRepo.save(c);
    }

    public CustomerEntity updateCustomer(Long id, CustomerEntity updated) {
        // H√§mtar befintlig kund, annars kastas NoSuchElementException
        CustomerEntity existing = customerRepo.findById(id)
                .orElseThrow(() -> new NoSuchElementException("Kund med id " + id + " finns ej"));

        // Uppdaterar kundens f√§lt
        existing.setFirstName(updated.getFirstName());
        existing.setLastName(updated.getLastName());
        existing.setEmail(updated.getEmail());
        existing.setPhone(updated.getPhone());

        // Sparar uppdateringen
        return customerRepo.save(existing);
    }

    public void deleteCustomer(Long id) {
        // Kontroll: kund med aktiv bokning f√•r inte tas bort
        if (bookingRepo.existsByCustomer_IdAndActiveTrue(id)) {
            throw new IllegalStateException("Kan inte ta bort kund ‚Äì aktiv bokning finns.");
        }

        // Tar bort kund fr√•n databasen
        customerRepo.deleteById(id);
    }

    // ======================================================
    // 3Ô∏è‚É£   HANTERING AV BOKNINGAR (RENTALS / BOOKINGS)
    // ======================================================

    public List<BookingEntity> listAllBookings() {
        // H√§mtar alla bokningar (aktiva + historiska)
        return bookingRepo.findAll();
    }

    public BookingEntity getBookingById(Long id) {
        // H√§mtar en specifik bokning via dess ID
        return bookingRepo.findById(id)
                .orElseThrow(() -> new NoSuchElementException("Bokning med id " + id + " finns ej"));
    }

    // -------------------------------
    //   SKAPA NY BOKNING
    // -------------------------------
    @Transactional // S√§kerst√§ller att hela metoden k√∂rs som en transaktion (alla √§ndringar sparas eller rullas tillbaka)
    public BookingEntity registerBooking(Long assetId, Long customerId, BookingDTO req) {
        // H√§mtar tillg√•ng fr√•n databasen
        AssetEntity asset = assetRepo.findById(assetId)
                .orElseThrow(() -> new NoSuchElementException("Tillg√•ng med id " + assetId + " finns ej"));

        // Kontrollera att tillg√•ngen inte redan √§r uthyrd
        if (!asset.isAvailable()) {
            throw new IllegalStateException("Tillg√•ngen √§r redan uthyrd");
        }

        // H√§mtar kund fr√•n databasen
        CustomerEntity customer = customerRepo.findById(customerId)
                .orElseThrow(() -> new NoSuchElementException("Kund med id " + customerId + " finns ej"));

        // Kontrollera att det inte finns aktiv bokning p√• tillg√•ngen
        if (bookingRepo.existsByAsset_IdAndActiveTrue(assetId)) {
            throw new IllegalStateException("Det finns redan en aktiv bokning p√• denna tillg√•ng");
        }

        // Om startdatum inte skickas med, s√§tt dagens datum
        LocalDate start = (req != null && req.getStartDate() != null)
                ? req.getStartDate()
                : LocalDate.now();

        // Skapar nytt BookingEntity-objekt
        BookingEntity booking = BookingEntity.builder()
                .asset(asset)
                .customer(customer)
                .startDate(start)
                .endDate(null)
                .active(true)
                .note(req != null ? req.getNote() : null)
                .build();

        // Markera tillg√•ng som uthyrd
        asset.setAvailable(false);
        assetRepo.save(asset);

        // Spara bokningen i databasen
        BookingEntity saved = bookingRepo.save(booking);

        // Logga till konsolen f√∂r sp√•rbarhet
        log.info("üü¢ Bokning skapad: bookingId={}, assetId={}, customerId={}",
                saved.getId(), asset.getId(), customer.getId());

        return saved;
    }

    // -------------------------------
    //   AVSLUTA BOKNING
    // -------------------------------
    @Transactional
    public BookingEntity closeBooking(Long bookingId) {
        // H√§mtar bokningen
        BookingEntity booking = bookingRepo.findById(bookingId)
                .orElseThrow(() -> new NoSuchElementException("Bokning med id " + bookingId + " finns ej"));

        // Kontrollera att den inte redan √§r avslutad
        if (!booking.isActive()) {
            throw new IllegalStateException("Bokningen √§r redan avslutad");
        }

        // S√§tt bokningen som avslutad och registrera dagens datum som slutdatum
        booking.setActive(false);
        booking.setEndDate(LocalDate.now());

        // Markera tillg√•ngen som tillg√§nglig igen
        AssetEntity asset = booking.getAsset();
        asset.setAvailable(true);
        assetRepo.save(asset);

        // Spara boknings√§ndringen
        BookingEntity saved = bookingRepo.save(booking);

        // Logga h√§ndelsen
        log.info("üîµ Bokning avslutad: bookingId={}, assetId={}", saved.getId(), asset.getId());

        return saved;
    }

    // -------------------------------
    //   TA BORT BOKNING
    // -------------------------------
    public void deleteBooking(Long id) {
        // H√§mtar bokningen
        BookingEntity booking = bookingRepo.findById(id)
                .orElseThrow(() -> new NoSuchElementException("Bokning med id " + id + " finns ej"));

        // Kontroll: aktiv bokning f√•r inte tas bort
        if (booking.isActive()) {
            throw new IllegalStateException("Kan inte ta bort aktiv bokning. Avsluta f√∂rst.");
        }

        // Tar bort bokningen fr√•n databasen
        bookingRepo.deleteById(id);
    }

    // -------------------------------
    //   H√ÑMTA HISTORIK
    // -------------------------------
    public List<BookingEntity> getBookingHistoryForAsset(Long assetId) {
        // H√§mtar alla bokningar kopplade till en viss tillg√•ng
        return bookingRepo.findByAsset_IdOrderByStartDateDesc(assetId);
    }

    public List<BookingEntity> getBookingHistoryForCustomer(Long customerId) {
        // H√§mtar alla bokningar kopplade till en viss kund
        return bookingRepo.findByCustomer_IdOrderByStartDateDesc(customerId);
    }
}
